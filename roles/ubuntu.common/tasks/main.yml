---
- name: create volume groups
  lvg:
    vg: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    force: "{{ item.force | default(false) }}"
    pvs: "{{ item.pvs }}"
  with_items: "{{ volume_groups }}"
  become: true
  become_user: root
  tags:
    - install

- name: create logical volumes
  lvol:
    vg: "{{ item.0.name }}"
    lv: "{{ item.1.name }}"
    state: "{{ item.1.state | default('present') }}"
    force: "{{ item.1.force | default(false) }}"
    size: "{{ item.1.size }}"
  with_subelements:
    - "{{ volume_groups }}"
    - volumes
  become: true
  become_user: root
  tags:
    - install

- name: create filesystems
  filesystem:
    dev: "{{ item.dev }}"
    fstype: "{{ item.fstype }}"
    force: "{{ item.force | default(false) }}"
  with_items: "{{ filesystems }}"
  become: true
  become_user: root
  tags:
    - install

- name: create/remove filesystem mount points
  file:
    state: "{{ absent if item.state | default('mounted') == 'absent' else 'directory' }}"
    owner: root
    group: root
    name: "{{ item.name }}"
  with_items: "{{ filesystems }}"
  become: true
  become_user: root
  tags:
    - install

- name: mount filesystems
  mount:
    name: "{{ item.name }}"
    src: "{{ item.dev }}"
    fstype: "{{ item.fstype }}"
    state: "{{ item.state | default('mounted') }}"
    opts: "{{ item.opts | default(omit) }}"
  with_items: "{{ filesystems }}"
  become: true
  become_user: root
  tags:
    - install
    - config

- name: create/remove files, links, and directories
  file:
    state: "{{ item.state | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    mode: "{{ item.mode | default(omit) }}"
    name: "{{ item.name | default(omit) }}"
    path: "{{ item.path | default(omit) }}"
    dest: "{{ item.dest | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
  with_items: "{{ files }}"
  become: true
  become_user: root
  tags:
    - install
    - config

- name: fetch repository keys from keyservers
  apt_key:
    id: "{{ item.id }}"
    state: "{{ item.state | default('present') }}"
    keyserver: "{{ item.keyserver | default(keyserver) }}"
  with_items: "{{ repository_keys }}"
  when: item.url is not defined
  become: true
  become_user: root
  tags:
    - install
    - config

- name: fetch repository keys from URLs
  apt_key:
    id: "{{ item.id | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    url: "{{ item.url }}"
  with_items: "{{ repository_keys }}"
  when: item.url is defined
  become: true
  become_user: root
  tags:
    - install
    - config

- name: configure apt proxy
  template: >-
    dest="/etc/apt/apt.conf.d/50proxy"
    src="apt-proxy.j2"
  when: apt_proxy is defined
  become: true
  become_user: root
  tags:
    - config
    - install

- name: configure repositories
  apt_repository:
    repo: "{{ item.repo }}"
    state: "{{ item.state | default('present') }}"
    update_cache: no
  with_items: "{{ repositories }}"
  become: true
  become_user: root
  tags:
    - install
    - config
    - upgrade

- name: update package cache
  apt:
    update_cache: yes
  become: true
  become_user: root
  tags:
    - install
    - upgrade

- name: install packages
  apt:
    name: "{{ item.name }}"
    state: "{{ item.state | default(package_state) }}"
    install_recommends: false
  with_items: "{{ packages }}"
  become: true
  become_user: root
  tags: install

- name: upgrade packages
  apt:
    upgrade: "{{ package_upgrade }}"
  become: true
  become_user: root
  tags:
    - install
    - upgrade

- name: configure users
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid | default(omit) }}"
    shell: "{{ item.shell | default(omit) }}"
    comment: "{{ item.comment | default(omit) }}"
    group: "{{ item.group | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
  with_items: "{{ users }}"
  become: true
  become_user: root
  tags:
    - user

- name: blacklist kernel modules
  kernel_blacklist:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ blacklist_modules }}"
  become: true
  become_user: root
  tags: config

- name: load kernel modules
  modprobe:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    params: "{{ item.params | default('') }}"
  with_items: "{{ modules }}"
  become: true
  become_user: root
  tags: config

- name: configure sysctl entries
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: "{{ item.state | default('present') }}"
    sysctl_file: "{{ item.file | default(omit) }}"
  with_items: "{{ sysctls }}"
  become: true
  become_user: root
  tags: config

- name: configure services
  service:
    name: "{{ item.name }}"
    state: "{{ item.state | default(omit) }}"
    enabled: "{{ item.enabled | default(true) }}"
  with_items: "{{ services }}"
  become: true
  become_user: root
  tags: config
